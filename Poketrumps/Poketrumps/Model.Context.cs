//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Poketrumps
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PokemonEntities : DbContext
    {
        public PokemonEntities()
            : base("PokemonEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Battle> Battles { get; set; }
        public virtual DbSet<Friend> Friends { get; set; }
        public virtual DbSet<Pokemon> Pokemons { get; set; }
        public virtual DbSet<Round> Rounds { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Trainer> Trainers { get; set; }
        public virtual DbSet<TrainerPokemon> TrainerPokemons { get; set; }
        public virtual DbSet<View_InsertPokemon> View_InsertPokemon { get; set; }
        public virtual DbSet<view_pokemon> view_pokemon { get; set; }
        public virtual DbSet<view_pokemonNEW> view_pokemonNEW { get; set; }
        public virtual DbSet<view_round> view_round { get; set; }
    
        public virtual int addFavourate(Nullable<short> trainerID, Nullable<short> pokemonId)
        {
            var trainerIDParameter = trainerID.HasValue ?
                new ObjectParameter("TrainerID", trainerID) :
                new ObjectParameter("TrainerID", typeof(short));
    
            var pokemonIdParameter = pokemonId.HasValue ?
                new ObjectParameter("PokemonId", pokemonId) :
                new ObjectParameter("PokemonId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addFavourate", trainerIDParameter, pokemonIdParameter);
        }
    
        public virtual int checkBattleWinner(Nullable<short> trainerID, Nullable<short> battleID)
        {
            var trainerIDParameter = trainerID.HasValue ?
                new ObjectParameter("TrainerID", trainerID) :
                new ObjectParameter("TrainerID", typeof(short));
    
            var battleIDParameter = battleID.HasValue ?
                new ObjectParameter("BattleID", battleID) :
                new ObjectParameter("BattleID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("checkBattleWinner", trainerIDParameter, battleIDParameter);
        }
    
        public virtual int checkFivePokemon(Nullable<int> trainerID)
        {
            var trainerIDParameter = trainerID.HasValue ?
                new ObjectParameter("trainerID", trainerID) :
                new ObjectParameter("trainerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("checkFivePokemon", trainerIDParameter);
        }
    
        public virtual int choosePokemon(Nullable<short> trainerID)
        {
            var trainerIDParameter = trainerID.HasValue ?
                new ObjectParameter("TrainerID", trainerID) :
                new ObjectParameter("TrainerID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("choosePokemon", trainerIDParameter);
        }
    
        public virtual int flipCoin()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("flipCoin");
        }
    
        public virtual int getEnemyStat(string statchosen, Nullable<short> trainer2PokemonID)
        {
            var statchosenParameter = statchosen != null ?
                new ObjectParameter("statchosen", statchosen) :
                new ObjectParameter("statchosen", typeof(string));
    
            var trainer2PokemonIDParameter = trainer2PokemonID.HasValue ?
                new ObjectParameter("Trainer2PokemonID", trainer2PokemonID) :
                new ObjectParameter("Trainer2PokemonID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getEnemyStat", statchosenParameter, trainer2PokemonIDParameter);
        }
    
        public virtual int getNewPokemon(Nullable<short> trainerID)
        {
            var trainerIDParameter = trainerID.HasValue ?
                new ObjectParameter("TrainerID", trainerID) :
                new ObjectParameter("TrainerID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getNewPokemon", trainerIDParameter);
        }
    
        public virtual int getRoundWinner(Nullable<short> stat1, Nullable<short> stat2, Nullable<short> trainer1ID, Nullable<short> trainer2ID)
        {
            var stat1Parameter = stat1.HasValue ?
                new ObjectParameter("Stat1", stat1) :
                new ObjectParameter("Stat1", typeof(short));
    
            var stat2Parameter = stat2.HasValue ?
                new ObjectParameter("Stat2", stat2) :
                new ObjectParameter("Stat2", typeof(short));
    
            var trainer1IDParameter = trainer1ID.HasValue ?
                new ObjectParameter("Trainer1ID", trainer1ID) :
                new ObjectParameter("Trainer1ID", typeof(short));
    
            var trainer2IDParameter = trainer2ID.HasValue ?
                new ObjectParameter("Trainer2ID", trainer2ID) :
                new ObjectParameter("Trainer2ID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getRoundWinner", stat1Parameter, stat2Parameter, trainer1IDParameter, trainer2IDParameter);
        }
    
        public virtual int getStatChosen(string statchosen, Nullable<short> trainer2PokemonID)
        {
            var statchosenParameter = statchosen != null ?
                new ObjectParameter("statchosen", statchosen) :
                new ObjectParameter("statchosen", typeof(string));
    
            var trainer2PokemonIDParameter = trainer2PokemonID.HasValue ?
                new ObjectParameter("Trainer2PokemonID", trainer2PokemonID) :
                new ObjectParameter("Trainer2PokemonID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getStatChosen", statchosenParameter, trainer2PokemonIDParameter);
        }
    
        public virtual int getValidEmail(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getValidEmail", emailParameter);
        }
    
        public virtual int getValidTName(string tName)
        {
            var tNameParameter = tName != null ?
                new ObjectParameter("TName", tName) :
                new ObjectParameter("TName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getValidTName", tNameParameter);
        }
    
        public virtual int initiateBattle(Nullable<short> trainerID1, Nullable<short> trainerID2, Nullable<short> battleID)
        {
            var trainerID1Parameter = trainerID1.HasValue ?
                new ObjectParameter("TrainerID1", trainerID1) :
                new ObjectParameter("TrainerID1", typeof(short));
    
            var trainerID2Parameter = trainerID2.HasValue ?
                new ObjectParameter("TrainerID2", trainerID2) :
                new ObjectParameter("TrainerID2", typeof(short));
    
            var battleIDParameter = battleID.HasValue ?
                new ObjectParameter("BattleID", battleID) :
                new ObjectParameter("BattleID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("initiateBattle", trainerID1Parameter, trainerID2Parameter, battleIDParameter);
        }
    
        public virtual int initiateRound(Nullable<short> trainerID1, Nullable<short> trainerID2, Nullable<short> battleID, Nullable<short> pokemon1ID, Nullable<short> pokemon2ID)
        {
            var trainerID1Parameter = trainerID1.HasValue ?
                new ObjectParameter("TrainerID1", trainerID1) :
                new ObjectParameter("TrainerID1", typeof(short));
    
            var trainerID2Parameter = trainerID2.HasValue ?
                new ObjectParameter("TrainerID2", trainerID2) :
                new ObjectParameter("TrainerID2", typeof(short));
    
            var battleIDParameter = battleID.HasValue ?
                new ObjectParameter("BattleID", battleID) :
                new ObjectParameter("BattleID", typeof(short));
    
            var pokemon1IDParameter = pokemon1ID.HasValue ?
                new ObjectParameter("Pokemon1ID", pokemon1ID) :
                new ObjectParameter("Pokemon1ID", typeof(short));
    
            var pokemon2IDParameter = pokemon2ID.HasValue ?
                new ObjectParameter("Pokemon2ID", pokemon2ID) :
                new ObjectParameter("Pokemon2ID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("initiateRound", trainerID1Parameter, trainerID2Parameter, battleIDParameter, pokemon1IDParameter, pokemon2IDParameter);
        }
    
        public virtual int insertRoundWinner(Nullable<int> battleID, Nullable<int> winnerID)
        {
            var battleIDParameter = battleID.HasValue ?
                new ObjectParameter("BattleID", battleID) :
                new ObjectParameter("BattleID", typeof(int));
    
            var winnerIDParameter = winnerID.HasValue ?
                new ObjectParameter("WinnerID", winnerID) :
                new ObjectParameter("WinnerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertRoundWinner", battleIDParameter, winnerIDParameter);
        }
    
        public virtual int LoadPokemonImage(string pokemonName)
        {
            var pokemonNameParameter = pokemonName != null ?
                new ObjectParameter("PokemonName", pokemonName) :
                new ObjectParameter("PokemonName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LoadPokemonImage", pokemonNameParameter);
        }
    
        public virtual int maxFavourites(Nullable<int> trainerID)
        {
            var trainerIDParameter = trainerID.HasValue ?
                new ObjectParameter("trainerID", trainerID) :
                new ObjectParameter("trainerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("maxFavourites", trainerIDParameter);
        }
    
        public virtual int maxRounds(Nullable<int> battleID)
        {
            var battleIDParameter = battleID.HasValue ?
                new ObjectParameter("BattleID", battleID) :
                new ObjectParameter("BattleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("maxRounds", battleIDParameter);
        }
    
        public virtual int removeFavourate(Nullable<short> trainerID, Nullable<short> pokemonId)
        {
            var trainerIDParameter = trainerID.HasValue ?
                new ObjectParameter("TrainerID", trainerID) :
                new ObjectParameter("TrainerID", typeof(short));
    
            var pokemonIdParameter = pokemonId.HasValue ?
                new ObjectParameter("PokemonId", pokemonId) :
                new ObjectParameter("PokemonId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("removeFavourate", trainerIDParameter, pokemonIdParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int updateTeam(Nullable<short> trainerID, Nullable<short> pokemonOff, Nullable<short> pokemonOn)
        {
            var trainerIDParameter = trainerID.HasValue ?
                new ObjectParameter("TrainerID", trainerID) :
                new ObjectParameter("TrainerID", typeof(short));
    
            var pokemonOffParameter = pokemonOff.HasValue ?
                new ObjectParameter("PokemonOff", pokemonOff) :
                new ObjectParameter("PokemonOff", typeof(short));
    
            var pokemonOnParameter = pokemonOn.HasValue ?
                new ObjectParameter("PokemonOn", pokemonOn) :
                new ObjectParameter("PokemonOn", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateTeam", trainerIDParameter, pokemonOffParameter, pokemonOnParameter);
        }
    }
}
